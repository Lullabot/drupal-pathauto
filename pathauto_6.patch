Index: modules/pathauto/pathauto_node.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/pathauto/pathauto_node.inc,v
retrieving revision 1.21
diff -u -r1.21 pathauto_node.inc
--- modules/pathauto/pathauto_node.inc	30 Aug 2006 20:38:43 -0000	1.21
+++ modules/pathauto/pathauto_node.inc	15 Sep 2006 07:19:14 -0000
@@ -43,9 +43,7 @@
           $settings['placeholders'][t('[catpath]')] =
             t('As [cat], but including its supercategories.');
           $settings['placeholders'][t('[catalias]')] =
-            t('The alias for the lowest-weight category that the page belongs to. '.
-              'This is useful for long category names. You must first set up '.
-              'aliases for your categories.');
+            t('The alias for the lowest-weight category that the page belongs to. This is useful for long category names. You must first set up aliases for your categories.');
         }
       }

@@ -62,7 +60,7 @@

       $nodetypes = node_get_types();
       foreach ($nodetypes as $ntype => $nodetype) {
-        $fieldlabel = t('Pattern for all '. $nodetype->name .' paths');
+        $fieldlabel = t('Pattern for all %name paths', array('%name' => theme('placeholder', $nodetype->name)));
         $settings['patternitems'][$ntype] = $fieldlabel;
       }
       return (object) $settings;
@@ -100,12 +98,9 @@
   */
   if (isset($form['#attributes']['id']) && ($form['#attributes']['id'] == 'node-form')) {
     if (user_access('create url aliases')) {
-      $output .= t('An alias will be automatically generated from the title '.
-        'and other node attributes, in addition to any alias manually '.
-        'provided above.');
+      $output .= t('An alias will be automatically generated from the title and other node attributes, in addition to any alias manually provided above.');
       if (user_access('administer pathauto')) {
-        $output .= t(' To control the format of the generated aliases, '.
-          'see the <a href="admin/settings/pathauto">pathauto settings</a>.');
+        $output .= t(' To control the format of the generated aliases, see the <a href="%url">pathauto settings</a>.', array('%url' => url('admin/settings/pathauto')));
       }
     }
     if ($output) {
@@ -257,7 +252,7 @@
   if ($lastalpha) {
     $pagetitle = check_plain(drupal_ucfirst($lastalpha));
   } else {
-    $pagetitle = 'Listing';
+    $pagetitle = t('Listing');
   }

   $result = pager_query(db_rewrite_sql(  'SELECT n.nid FROM {url_alias} a '.
@@ -273,6 +268,6 @@

   $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));

-  drupal_set_title(t($pagetitle));
+  drupal_set_title($pagetitle);
   return $output;
 }
Index: modules/pathauto/pathauto_taxonomy.inc
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/pathauto/pathauto_taxonomy.inc,v
retrieving revision 1.14
diff -u -r1.14 pathauto_taxonomy.inc
--- modules/pathauto/pathauto_taxonomy.inc	14 Sep 2006 23:41:11 -0000	1.14
+++ modules/pathauto/pathauto_taxonomy.inc	15 Sep 2006 07:10:09 -0000
@@ -25,15 +25,14 @@

       $settings['supportsfeeds'] = '0/feed';
       $settings['bulkname'] = t('Bulk update category paths');
-      $settings['bulkdescr'] =
-        t('Generate aliases for all existing categories which do not already have aliases.');
+      $settings['bulkdescr'] = t('Generate aliases for all existing categories which do not already have aliases.');

       $vocabularies = taxonomy_get_vocabularies();
       if (sizeof($vocabularies) > 0) {
         $settings['patternitems'] = array();
         foreach ($vocabularies as $vocab) {
           $vocabname = $vocab->name;
-          $fieldlabel = t('Pattern for all '.$vocabname.' paths');
+          $fieldlabel = t('Pattern for all %vocab-name paths', array('%vocab-name' => theme('placeholder', $vocabname)));
           $settings['patternitems'][$vocab->vid] = $fieldlabel;
         }
       }
Index: modules/pathauto/pathauto.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/pathauto/pathauto.module,v
retrieving revision 1.28
diff -u -r1.28 pathauto.module
--- modules/pathauto/pathauto.module	15 Sep 2006 00:15:11 -0000	1.28
+++ modules/pathauto/pathauto.module	15 Sep 2006 07:16:14 -0000
@@ -3,13 +3,11 @@

 function pathauto_help($section) {
   switch ($section) {
-    case 'admin/settings/modules#description':
-      $output = t('Provides a mechanism for modules to automatically '.
-        'generate aliases for the content they manage.');
+    case 'admin/modules#description':
+      $output = t('Provides a mechanism for modules to automatically generate aliases for the content they manage.');
       break;
     case 'admin/help#pathauto':
-      $output = t('Provides a mechanism for modules to automatically '.
-        'generate aliases for the content they manage.');
+      $output = t('Provides a mechanism for modules to automatically generate aliases for the content they manage.');
       break;
   }

@@ -32,9 +30,10 @@

   // Insist that path.module be enabled
   if (!module_exists('path')) {
-    $form['error'] = array('#type' => 'item',
-      '#title' => t('<p>The pathauto module is an extension of the <b>path</b> '.
-      'module - you must <a href="admin/modules">enable <b>path</b></a> to use it.</p>'));
+    $form['error'] = array(
+      '#type' => 'item',
+      '#title' => '<p>'. t('The pathauto module is an extension of the <strong>path</strong> module - you must <a href="%url">enable <strong>path</strong></a> to use it.', array('%url' => url('admin/modules'))) .'</p>'
+    );
     return system_settings_form($form);
   }

@@ -56,30 +55,22 @@
   $form['general']['pathauto_separator'] = array('#type' => 'textfield',
     '#title' => t('Separator'), '#size' => 1, '#maxlength' => 1,
     '#default_value' => variable_get('pathauto_separator', '_'),
-    '#description' => t('Character used to separate words in titles. This will replace '.
-      'any spaces and punctuation characters.'));
+    '#description' => t('Character used to separate words in titles. This will replace any spaces and punctuation characters.'));

   $form['general']['pathauto_max_length'] = array('#type' => 'textfield',
     '#title' => t('Maximum alias length'), '#size' => 3, '#maxlength' => 3,
     '#default_value' => variable_get('pathauto_max_length', 128),
-    '#description' => t('Maximum text length of aliases to generate. '.
-      '128 is the maximum permissible.'));
+    '#description' => t('Maximum text length of aliases to generate. 128 is the maximum permissible.'));

   $form['general']['pathauto_max_component_length'] = array('#type' => 'textfield',
     '#title' => t('Maximum component length'), '#size' => 3, '#maxlength' => 3,
     '#default_value' => variable_get('pathauto_max_component_length', 128),
-    '#description' => t('Maximum text length of any single component in the alias (e.g., [title]). '.
-      '128 is the maximum permissible.'));
+    '#description' => t('Maximum text length of any single component in the alias (e.g., [title]). 128 is the maximum permissible.'));

   $form['general']['pathauto_indexaliases'] = array('#type' => 'checkbox',
     '#title' => t('Create index aliases'),
     '#default_value' => variable_get('pathauto_indexaliases', FALSE),
-    '#description' => t('When a pattern generates a hierarchical alias (i.e., any alias '.
-      'containing a slash), generate aliases for each step of the '.
-      'hierarchy which can be used to list content within that hierarchy. '.
-      'For example, if a node alias "music/concert/beethoven" is created, '.
-      'also create an alias "music/concert" which will list all concert nodes, '.
-      'and an alias "music" which will list all music nodes.'));
+    '#description' => t('When a pattern generates a hierarchical alias (i.e., any alias containing a slash), generate aliases for each step of the hierarchy which can be used to list content within that hierarchy. For example, if a node alias "music/concert/beethoven" is created, also create an alias "music/concert" which will list all concert nodes, and an alias "music" which will list all music nodes.'));

   // If requested, do a bulk generation of index aliases
   $do_index_bulkupdate = variable_get('pathauto_indexaliases_bulkupdate', FALSE);
@@ -94,8 +85,7 @@
     '#options' => array(t('Do nothing, leaving the old alias intact'),
           t('Create a new alias in addition to the old alias'),
           t('Create a new alias, replacing the old one')),
-    '#description' => t('When updating an existing content item which already has an alias, '.
-      'what should pathauto do?'));
+    '#description' => t('What should pathauto do when updating an existing content item which already has an alias?'));

   // Call the hook on all modules - an array of 'settings' objects is returned
   $all_settings = module_invoke_all('pathauto', 'settings');
